{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nexport default useApi = function useApi(apiFunc) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var request = function request() {\n    var response;\n    return _regeneratorRuntime.async(function request$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(apiFunc());\n\n          case 2:\n            response = _context.sent;\n            setLoading(false);\n\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setError(true));\n\n          case 6:\n            setError(false);\n            setData(response.data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    request: request,\n    data: data,\n    error: error,\n    loading: loading\n  };\n};","map":{"version":3,"sources":["/Users/evgenii/eventify1.0/my-project/app/hooks/useApi.js"],"names":["useState","useApi","apiFunc","data","setData","error","setError","loading","setLoading","request","response","ok"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAeC,MAAM,GAAG,gBAACC,OAAD,EAAa;AAAA,kBACXF,QAAQ,CAAC,EAAD,CADG;AAAA;AAAA,MAC5BG,IAD4B;AAAA,MACtBC,OADsB;;AAAA,mBAETJ,QAAQ,CAAC,KAAD,CAFC;AAAA;AAAA,MAE5BK,KAF4B;AAAA,MAErBC,QAFqB;;AAAA,mBAGLN,QAAQ,CAAC,IAAD,CAHH;AAAA;AAAA,MAG5BO,OAH4B;AAAA,MAGnBC,UAHmB;;AAKnC,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAESP,OAAO,EAFhB;;AAAA;AAERQ,YAAAA,QAFQ;AAGdF,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAHc,gBAKTE,QAAQ,CAACC,EALA;AAAA;AAAA;AAAA;;AAAA,6CAKWL,QAAQ,CAAC,IAAD,CALnB;;AAAA;AAOdA,YAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,YAAAA,OAAO,CAACM,QAAQ,CAACP,IAAV,CAAP;;AARc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAUA,SAAO;AAAEM,IAAAA,OAAO,EAAPA,OAAF;AAAWN,IAAAA,IAAI,EAAJA,IAAX;AAAiBE,IAAAA,KAAK,EAALA,KAAjB;AAAwBE,IAAAA,OAAO,EAAPA;AAAxB,GAAP;AACD,CAhBD","sourcesContent":["import { useState } from \"react\";\n\nexport default useApi = (apiFunc) => {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const request = async () => {\n    // setLoading(true);\n    const response = await apiFunc();\n    setLoading(false);\n\n    if (!response.ok) return setError(true);\n\n    setError(false);\n    setData(response.data);\n  };\n  return { request, data, error, loading };\n};\n"]},"metadata":{},"sourceType":"module"}